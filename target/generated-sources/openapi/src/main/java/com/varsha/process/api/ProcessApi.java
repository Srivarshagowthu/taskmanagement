/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.varsha.process.api;

import com.varsha.process.dto.Process;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-05T17:16:59.398219+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "process", description = "the process API")
public interface ProcessApi {

    default ProcessApiDelegate getDelegate() {
        return new ProcessApiDelegate() {};
    }

    /**
     * POST /process : Create a new process
     *
     * @param process Process to be created (optional)
     * @return Process created successfully (status code 201)
     *         or Invalid input data (status code 400)
     */
    @Operation(
        operationId = "createProcess",
        summary = "Create a new process",
        responses = {
            @ApiResponse(responseCode = "201", description = "Process created successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input data")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/process",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createProcess(
        @Parameter(name = "Process", description = "Process to be created") @Valid @RequestBody(required = false) Process process
    ) {
        return getDelegate().createProcess(process);
    }


    /**
     * DELETE /process/{id} : Delete a process by ID
     *
     * @param id  (required)
     * @return Process deleted successfully (status code 204)
     *         or Process not found (status code 404)
     */
    @Operation(
        operationId = "deleteProcess",
        summary = "Delete a process by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Process deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Process not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/process/{id}"
    )
    default ResponseEntity<Void> deleteProcess(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getDelegate().deleteProcess(id);
    }


    /**
     * GET /process/{id} : Get a process by ID
     *
     * @param id  (required)
     * @return Process retrieved successfully (status code 200)
     *         or Process not found (status code 404)
     */
    @Operation(
        operationId = "getProcess",
        summary = "Get a process by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Process retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Process.class))
            }),
            @ApiResponse(responseCode = "404", description = "Process not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/process/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Process> getProcess(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getDelegate().getProcess(id);
    }


    /**
     * PUT /process/{id} : Update a process by ID
     *
     * @param id  (required)
     * @param process Process data to be updated (optional)
     * @return Process updated successfully (status code 200)
     *         or Invalid input data (status code 400)
     *         or Process not found (status code 404)
     */
    @Operation(
        operationId = "updateProcess",
        summary = "Update a process by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Process updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input data"),
            @ApiResponse(responseCode = "404", description = "Process not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/process/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateProcess(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Process", description = "Process data to be updated") @Valid @RequestBody(required = false) Process process
    ) {
        return getDelegate().updateProcess(id, process);
    }

}
